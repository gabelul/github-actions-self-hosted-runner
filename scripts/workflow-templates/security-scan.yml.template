# Description: Comprehensive security scanning workflow for vulnerability detection and compliance
#
# This template provides extensive security scanning capabilities including:
# - Static code analysis (SAST)
# - Dependency vulnerability scanning
# - Container security scanning
# - Secret detection
# - License compliance checking
# - Security policy enforcement
#
# Generated by workflow-helper.sh

name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 3 * * 1'  # Weekly on Monday at 3 AM

env:
  SECURITY_SCAN_TIMEOUT: 1800  # 30 minutes

jobs:
  # Static Application Security Testing (SAST)
  sast-scan:
    name: Static Code Analysis
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for better analysis
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint security rules
        run: |
          npm install eslint-plugin-security
          npx eslint . --ext .js,.ts,.jsx,.tsx \
            --config .eslintrc.security.js \
            --format json \
            --output-file eslint-security-report.json
        continue-on-error: true

      - name: Run Semgrep SAST scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
        continue-on-error: true

      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: security-extended,security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Upload SAST results
        uses: actions/upload-artifact@v4
        with:
          name: sast-results
          path: |
            eslint-security-report.json
            semgrep-results.json

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level moderate --json > npm-audit.json || true
          npm audit --audit-level moderate

      - name: Run Snyk vulnerability scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json > snyk-results.json

      - name: Run OWASP Dependency Check
        run: |
          # Download and run OWASP Dependency Check
          wget -O dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
          unzip dependency-check.zip
          ./dependency-check/bin/dependency-check.sh \
            --project "MyProject" \
            --scan . \
            --format JSON \
            --out dependency-check-report.json \
            --suppress dependency-check-suppressions.xml || true

      - name: Check for known malicious packages
        run: |
          echo "Checking for known malicious packages..."
          # Create a simple check against known bad packages
          npm ls --json | jq -r '.dependencies | keys[]' > installed-packages.txt

          # Check against a curated list of malicious packages
          # (You would maintain this list or use a service)
          MALICIOUS_PACKAGES=("event-stream@3.3.6" "eslint-scope@3.7.2")

          for package in "${MALICIOUS_PACKAGES[@]}"; do
            if npm ls "$package" >/dev/null 2>&1; then
              echo "❌ CRITICAL: Malicious package detected: $package"
              exit 1
            fi
          done

          echo "✅ No known malicious packages detected"

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: |
            npm-audit.json
            snyk-results.json
            dependency-check-report.json
            installed-packages.txt

  # Secret detection
  secret-scan:
    name: Secret Detection
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog secret scan
        run: |
          docker run --rm -v "$PWD:/src" \
            trufflesecurity/trufflehog:latest \
            filesystem /src \
            --json \
            --no-update > trufflehog-results.json || true

      - name: Run GitLeaks secret scan
        run: |
          docker run --rm -v "$PWD:/repo" \
            zricethezav/gitleaks:latest \
            detect \
            --source /repo \
            --report-format json \
            --report-path /repo/gitleaks-report.json \
            --no-git || true

      - name: Check for hardcoded secrets
        run: |
          echo "Checking for common hardcoded secrets..."

          # Check for common secret patterns
          PATTERNS=(
            "password\s*=\s*['\"][^'\"]*['\"]"
            "api_key\s*=\s*['\"][^'\"]*['\"]"
            "secret\s*=\s*['\"][^'\"]*['\"]"
            "token\s*=\s*['\"][^'\"]*['\"]"
            "-----BEGIN PRIVATE KEY-----"
            "-----BEGIN RSA PRIVATE KEY-----"
          )

          found_secrets=false

          for pattern in "${PATTERNS[@]}"; do
            if grep -r -i -E "$pattern" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.json" --exclude="*.md"; then
              echo "❌ Potential hardcoded secret found: $pattern"
              found_secrets=true
            fi
          done

          if [ "$found_secrets" = true ]; then
            echo "❌ CRITICAL: Hardcoded secrets detected"
            exit 1
          fi

          echo "✅ No hardcoded secrets detected"

      - name: Upload secret scan results
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan-results
          path: |
            trufflehog-results.json
            gitleaks-report.json

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: self-hosted
    if: hashFiles('Dockerfile') != ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for scanning
        run: |
          docker build -t security-scan-image:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: security-scan-image:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Run Trivy for JSON output
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: security-scan-image:latest
          format: 'json'
          output: 'trivy-results.json'

      - name: Run Docker Bench Security
        run: |
          docker run --rm --net host --pid host --userns host --cap-add audit_control \
            -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
            -v /etc:/etc:ro \
            -v /usr/bin/containerd:/usr/bin/containerd:ro \
            -v /usr/bin/runc:/usr/bin/runc:ro \
            -v /usr/lib/systemd:/usr/lib/systemd:ro \
            -v /var/lib:/var/lib:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            --label docker_bench_security \
            docker/docker-bench-security > docker-bench-results.txt || true

      - name: Upload container scan results
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-results
          path: |
            trivy-results.sarif
            trivy-results.json
            docker-bench-results.txt

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif

  # License compliance check
  license-scan:
    name: License Compliance
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check license compliance
        run: |
          npm install -g license-checker

          # Generate license report
          license-checker --json --out licenses.json

          # Check for prohibited licenses
          PROHIBITED_LICENSES=("GPL-2.0" "GPL-3.0" "AGPL-1.0" "AGPL-3.0")
          prohibited_found=false

          for license in "${PROHIBITED_LICENSES[@]}"; do
            if jq -r '.[] | select(.licenses | contains("'$license'")) | .name' licenses.json | grep -q .; then
              echo "❌ CRITICAL: Prohibited license found: $license"
              prohibited_found=true
            fi
          done

          if [ "$prohibited_found" = true ]; then
            echo "❌ License compliance check failed"
            exit 1
          fi

          echo "✅ License compliance check passed"

      - name: Upload license scan results
        uses: actions/upload-artifact@v4
        with:
          name: license-scan-results
          path: licenses.json

  # Security policy enforcement
  policy-check:
    name: Security Policy Check
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security policy files
        run: |
          echo "Checking for required security policy files..."

          REQUIRED_FILES=(
            "SECURITY.md"
            ".github/SECURITY.md"
            "docs/SECURITY.md"
          )

          policy_found=false

          for file in "${REQUIRED_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ Security policy found: $file"
              policy_found=true
              break
            fi
          done

          if [ "$policy_found" = false ]; then
            echo "⚠️ No security policy file found"
            echo "Consider adding a SECURITY.md file to your repository"
          fi

      - name: Check for vulnerability disclosure
        run: |
          echo "Checking for vulnerability disclosure process..."

          if [ -f "SECURITY.md" ] || [ -f ".github/SECURITY.md" ]; then
            if grep -q -i "vulnerability\|security\|report" SECURITY.md .github/SECURITY.md 2>/dev/null; then
              echo "✅ Vulnerability disclosure process documented"
            else
              echo "⚠️ Security file exists but no vulnerability reporting process found"
            fi
          fi

      - name: Check for security contact
        run: |
          echo "Checking for security contact information..."

          if grep -r -i "security@\|security-team@" . --exclude-dir=node_modules --exclude-dir=.git 2>/dev/null; then
            echo "✅ Security contact information found"
          else
            echo "⚠️ No security contact information found"
          fi

  # Aggregate all security scan results
  security-report:
    name: Generate Security Report
    runs-on: self-hosted
    needs: [sast-scan, dependency-scan, secret-scan, container-scan, license-scan, policy-check]
    if: always()

    steps:
      - name: Download all security scan results
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "# 🔒 Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "Generated on: $(date)" >> security-summary.md
          echo "" >> security-summary.md

          # Check each scan result
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md

          # SAST results
          if [ -d "sast-results" ]; then
            echo "- ✅ **Static Code Analysis**: Completed" >> security-summary.md
          else
            echo "- ❌ **Static Code Analysis**: Failed" >> security-summary.md
          fi

          # Dependency scan results
          if [ -d "dependency-scan-results" ]; then
            echo "- ✅ **Dependency Scan**: Completed" >> security-summary.md
          else
            echo "- ❌ **Dependency Scan**: Failed" >> security-summary.md
          fi

          # Secret scan results
          if [ -d "secret-scan-results" ]; then
            echo "- ✅ **Secret Detection**: Completed" >> security-summary.md
          else
            echo "- ❌ **Secret Detection**: Failed" >> security-summary.md
          fi

          # Container scan results
          if [ -d "container-scan-results" ]; then
            echo "- ✅ **Container Security**: Completed" >> security-summary.md
          else
            echo "- ℹ️ **Container Security**: Skipped (no Dockerfile)" >> security-summary.md
          fi

          # License scan results
          if [ -d "license-scan-results" ]; then
            echo "- ✅ **License Compliance**: Completed" >> security-summary.md
          else
            echo "- ❌ **License Compliance**: Failed" >> security-summary.md
          fi

          echo "" >> security-summary.md
          echo "## Recommendations" >> security-summary.md
          echo "" >> security-summary.md
          echo "1. Review all identified vulnerabilities" >> security-summary.md
          echo "2. Update dependencies with known vulnerabilities" >> security-summary.md
          echo "3. Remove any detected secrets from codebase" >> security-summary.md
          echo "4. Ensure security policy is up to date" >> security-summary.md
          echo "5. Implement recommended security controls" >> security-summary.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-summary.md

      - name: Add security report to job summary
        run: |
          echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat security-summary.md >> $GITHUB_STEP_SUMMARY

  # Send security notifications
  notify-security:
    name: Security Notifications
    runs-on: self-hosted
    needs: security-report
    if: always()

    steps:
      - name: Notify on high severity findings
        if: needs.security-report.result == 'failure'
        run: |
          echo "🚨 HIGH SEVERITY SECURITY FINDINGS DETECTED"
          echo "Please review the security scan results immediately"
          # Send urgent notification to security team

      - name: Notify on completion
        run: |
          echo "🔒 Security scan completed"
          # Send notification about scan completion