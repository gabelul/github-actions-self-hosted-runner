# Description: Production deployment workflow with approval gates and rollback capabilities
#
# This template provides a secure production deployment pipeline including:
# - Manual approval gates for production deployments
# - Environment-specific configurations
# - Health checks and smoke tests
# - Automatic rollback on failure
# - Deployment notifications
# - Database migration support
#
# Generated by workflow-helper.sh

name: Production Deployment

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (tag name)'
        required: true
        default: 'latest'
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  DEPLOYMENT_TIMEOUT: 600  # 10 minutes
  HEALTH_CHECK_RETRIES: 10

jobs:
  # Pre-deployment checks
  pre-deploy:
    name: Pre-deployment Checks
    runs-on: self-hosted

    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.environment.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version: $VERSION"

      - name: Determine environment
        id: environment
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
          else
            ENV="production"
          fi
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "Target environment: $ENV"

      - name: Validate version exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ "$VERSION" != "latest" ]]; then
            # Check if the tag exists
            git fetch --tags
            if ! git tag -l | grep -q "^$VERSION$"; then
              echo "Error: Tag $VERSION does not exist"
              exit 1
            fi
          fi

      - name: Check deployment prerequisites
        run: |
          echo "Checking deployment prerequisites..."
          # Add your prerequisite checks here
          # Examples:
          # - Check database connectivity
          # - Verify external service availability
          # - Check storage space
          # - Validate configuration files

  # Build artifacts for deployment
  build:
    name: Build Deployment Artifacts
    runs-on: self-hosted
    needs: pre-deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.pre-deploy.outputs.version }}

      - name: Setup build environment
        run: |
          echo "Setting up build environment for deployment"
          # Install dependencies, setup tools, etc.

      - name: Build production artifacts
        run: |
          echo "Building production artifacts"
          # Add your build commands here
          # Examples:
          # npm run build:prod
          # docker build -t myapp:${{ needs.pre-deploy.outputs.version }} .
          # make build

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: |
            dist/
            build/
            docker-compose.prod.yml
            k8s/
          retention-days: 30

  # Manual approval for production
  approval:
    name: Deployment Approval
    runs-on: self-hosted
    needs: [pre-deploy, build]
    if: needs.pre-deploy.outputs.environment == 'production'
    environment:
      name: production
      url: https://production.example.com

    steps:
      - name: Request deployment approval
        run: |
          echo "üöÄ Production deployment requested"
          echo "Version: ${{ needs.pre-deploy.outputs.version }}"
          echo "Environment: ${{ needs.pre-deploy.outputs.environment }}"
          echo "Triggered by: ${{ github.actor }}"

  # Database migration (if needed)
  migrate:
    name: Database Migration
    runs-on: self-hosted
    needs: [pre-deploy, build, approval]
    if: always() && (needs.approval.result == 'success' || needs.pre-deploy.outputs.environment != 'production')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.pre-deploy.outputs.version }}

      - name: Download deployment artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts

      - name: Create database backup
        run: |
          echo "Creating database backup before migration"
          # Add your database backup commands here
          # pg_dump, mysqldump, etc.

      - name: Run database migrations
        run: |
          echo "Running database migrations"
          # Add your migration commands here
          # Examples:
          # python manage.py migrate
          # npm run migrate
          # liquibase update

      - name: Verify migration
        run: |
          echo "Verifying database migration"
          # Add verification commands here

  # Deploy to target environment
  deploy:
    name: Deploy to ${{ needs.pre-deploy.outputs.environment }}
    runs-on: self-hosted
    needs: [pre-deploy, build, approval, migrate]
    if: always() && needs.migrate.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.pre-deploy.outputs.version }}

      - name: Download deployment artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts

      - name: Deploy application
        id: deploy
        timeout-minutes: 10
        run: |
          echo "Deploying to ${{ needs.pre-deploy.outputs.environment }}"

          # Add your deployment commands here
          # Examples:

          # Docker deployment
          # docker-compose -f docker-compose.prod.yml up -d

          # Kubernetes deployment
          # kubectl set image deployment/myapp myapp=myapp:${{ needs.pre-deploy.outputs.version }}
          # kubectl rollout status deployment/myapp --timeout=600s

          # Traditional server deployment
          # rsync -avz dist/ user@server:/var/www/html/
          # systemctl restart myapp

          echo "Deployment completed"

      - name: Wait for deployment to stabilize
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30

  # Health checks and smoke tests
  health-check:
    name: Health Check & Smoke Tests
    runs-on: self-hosted
    needs: [pre-deploy, deploy]

    steps:
      - name: Run health checks
        id: health
        run: |
          echo "Running health checks..."

          ENV="${{ needs.pre-deploy.outputs.environment }}"

          if [[ "$ENV" == "production" ]]; then
            BASE_URL="https://production.example.com"
          else
            BASE_URL="https://staging.example.com"
          fi

          # Health check with retries
          for i in $(seq 1 ${{ env.HEALTH_CHECK_RETRIES }}); do
            echo "Health check attempt $i/${{ env.HEALTH_CHECK_RETRIES }}"

            if curl -f "$BASE_URL/health" -o /dev/null -s; then
              echo "‚úÖ Health check passed"
              echo "healthy=true" >> $GITHUB_OUTPUT
              break
            else
              echo "‚ùå Health check failed"
              if [[ $i -eq ${{ env.HEALTH_CHECK_RETRIES }} ]]; then
                echo "healthy=false" >> $GITHUB_OUTPUT
                exit 1
              fi
              sleep 30
            fi
          done

      - name: Run smoke tests
        if: steps.health.outputs.healthy == 'true'
        run: |
          echo "Running smoke tests..."

          ENV="${{ needs.pre-deploy.outputs.environment }}"

          if [[ "$ENV" == "production" ]]; then
            BASE_URL="https://production.example.com"
          else
            BASE_URL="https://staging.example.com"
          fi

          # Add your smoke tests here
          # Examples:
          # curl -f "$BASE_URL/api/version"
          # npm run test:smoke
          # pytest tests/smoke/

  # Rollback on failure
  rollback:
    name: Rollback on Failure
    runs-on: self-hosted
    needs: [pre-deploy, deploy, health-check]
    if: failure() && needs.deploy.result == 'success'

    steps:
      - name: Rollback deployment
        run: |
          echo "üö® Deployment failed, initiating rollback"

          # Add your rollback commands here
          # Examples:
          # kubectl rollout undo deployment/myapp
          # docker-compose -f docker-compose.prod.yml down && docker-compose -f docker-compose.prod.yml.backup up -d
          # systemctl stop myapp && systemctl start myapp-backup

      - name: Verify rollback
        run: |
          echo "Verifying rollback..."
          # Add rollback verification commands

      - name: Notify rollback
        run: |
          echo "‚ùå Deployment failed and was rolled back"
          # Send notifications about rollback

  # Post-deployment tasks
  post-deploy:
    name: Post-deployment Tasks
    runs-on: self-hosted
    needs: [pre-deploy, health-check]
    if: needs.health-check.result == 'success'

    steps:
      - name: Update monitoring and alerting
        run: |
          echo "Updating monitoring configuration"
          # Update monitoring dashboards, alerts, etc.

      - name: Clear caches
        run: |
          echo "Clearing application caches"
          # Clear Redis, CDN caches, etc.

      - name: Update documentation
        run: |
          echo "Updating deployment documentation"
          # Update internal wikis, changelogs, etc.

      - name: Notify success
        run: |
          echo "‚úÖ Deployment successful!"
          echo "Version: ${{ needs.pre-deploy.outputs.version }}"
          echo "Environment: ${{ needs.pre-deploy.outputs.environment }}"

          # Send success notifications
          # Examples:
          # Send Slack notification
          # Update deployment tracking system
          # Create GitHub release notes