# Description: Docker build and push workflow with multi-architecture support and security scanning
#
# This template provides a comprehensive Docker CI/CD pipeline including:
# - Multi-architecture builds (AMD64, ARM64)
# - Docker layer caching for faster builds
# - Security scanning with Trivy
# - Image optimization and best practices
# - Multi-registry push support
# - Vulnerability reporting
#
# Generated by workflow-helper.sh

name: Docker Build & Push

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test Docker image
  build:
    name: Build & Test
    runs-on: self-hosted

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push=false

      - name: Test Docker image
        run: |
          # Basic smoke test
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --version || \
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --help || \
          echo "Image built successfully"

  # Security scanning
  security:
    name: Security Scan
    runs-on: self-hosted
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: scan-image:latest
          cache-from: type=gha

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: scan-image:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy for table output
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: scan-image:latest
          format: 'table'

      - name: Scan for secrets
        run: |
          docker run --rm -v "$PWD:/src" \
            trufflesecurity/trufflehog:latest \
            filesystem /src --json > secrets-scan.json || true

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            trivy-results.sarif
            secrets-scan.json

  # Push to registry
  push:
    name: Push to Registry
    runs-on: self-hosted
    needs: [build, security]
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-push.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # Deploy (optional)
  deploy:
    name: Deploy
    runs-on: self-hosted
    needs: push
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to staging
        run: |
          echo "Add your deployment commands here"
          # Example Kubernetes deployment:
          # kubectl set image deployment/myapp myapp=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.push.outputs.digest }}
          # kubectl rollout status deployment/myapp

      - name: Run health check
        run: |
          echo "Add health check commands here"
          # Example:
          # curl -f http://staging.example.com/health || exit 1

      - name: Notify deployment
        run: |
          echo "Deployment successful!"
          # Add notification to Slack, Discord, etc.

  # Image cleanup (optional)
  cleanup:
    name: Cleanup Old Images
    runs-on: self-hosted
    needs: deploy
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Delete old images
        run: |
          echo "Cleanup old Docker images if needed"
          # Example: Keep only last 10 images
          # docker image prune -a -f --filter "until=720h"