name: Production CI/CD

# Example production workflow that showcases self-hosted runner capabilities
# This workflow demonstrates typical CI/CD patterns optimized for self-hosted runners

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: 'your-registry.com'

jobs:
  # Fast checks that run in parallel
  quality-checks:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run security audit
      run: npm audit --audit-level moderate

  # Comprehensive testing
  test:
    runs-on: self-hosted
    needs: quality-checks

    strategy:
      matrix:
        test-suite: [unit, integration, e2e]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ${{ matrix.test-suite }} tests
      run: npm run test:${{ matrix.test-suite }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-suite }}
        path: |
          coverage/
          test-results/

  # Build and package
  build:
    runs-on: self-hosted
    needs: [quality-checks, test]
    if: github.event_name == 'push' || github.event_name == 'release'

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/my-app
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
          docker-compose.prod.yml

  # Deploy to staging
  deploy-staging:
    runs-on: self-hosted
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying ${{ needs.build.outputs.image-tag }} to staging"
        # Add your deployment commands here
        # docker-compose -f docker-compose.staging.yml up -d

    - name: Run staging smoke tests
      run: |
        echo "Running smoke tests against staging"
        # Add your smoke test commands here

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: "Staging deployment ${{ job.status }} for ${{ github.sha }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Deploy to production
  deploy-production:
    runs-on: self-hosted
    needs: build
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying ${{ needs.build.outputs.image-tag }} to production"
        # Add your production deployment commands here
        # kubectl set image deployment/my-app my-app=${{ needs.build.outputs.image-tag }}

    - name: Run production health checks
      run: |
        echo "Running health checks against production"
        # Add your health check commands here

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "Production deployment successful for ${{ github.event.release.tag_name }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Security scanning
  security-scan:
    runs-on: self-hosted
    needs: build
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run container security scan
      run: |
        docker scout quickview ${{ needs.build.outputs.image-tag }}
        docker scout cves ${{ needs.build.outputs.image-tag }}

    - name: Run SAST scan
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Cleanup old artifacts
  cleanup:
    runs-on: self-hosted
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Clean up old Docker images
      run: |
        echo "Cleaning up old Docker images"
        docker image prune -f --filter "until=72h"

    - name: Clean up old build artifacts
      run: |
        echo "Cleaning up old build artifacts"
        find /tmp -name "github-runner-*" -mtime +7 -delete || true