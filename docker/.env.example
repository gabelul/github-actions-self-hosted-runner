# GitHub Actions Self-Hosted Runner Configuration
#
# Copy this file to .env and configure your settings for Docker deployment.
# Environment variables defined here will be used by docker-compose.yml
# to configure your GitHub Actions runner containers.
#
# Quick Setup:
#   1. Copy: cp .env.example .env
#   2. Edit: nano .env (configure GITHUB_TOKEN and GITHUB_REPOSITORY)
#   3. Deploy: docker-compose up -d
#   4. Monitor: docker-compose logs -f github-runner
#
# Security Note:
#   Keep your .env file secure and never commit it to version control.
#   The .gitignore is configured to exclude .env files automatically.

# =============================================================================
# REQUIRED CONFIGURATION
# =============================================================================

# GitHub Personal Access Token
# Create at: https://github.com/settings/tokens/new
# Required scopes: repo, admin:org (for organization runners)
# For personal repositories: repo scope is sufficient
GITHUB_TOKEN=ghp_your_personal_access_token_here

# GitHub Repository
# Format: owner/repository-name
# Examples:
#   GITHUB_REPOSITORY=octocat/Hello-World
#   GITHUB_REPOSITORY=myorg/my-private-repo
GITHUB_REPOSITORY=owner/repository-name

# =============================================================================
# RUNNER CONFIGURATION
# =============================================================================

# Runner Name (optional)
# Default: Uses container hostname
# Must be unique within the repository/organization
RUNNER_NAME=my-docker-runner

# Runner Labels (optional)
# Comma-separated list of labels for workflow targeting
# Default: self-hosted,linux,x64,docker
# Examples:
#   RUNNER_LABELS=self-hosted,linux,x64,docker,gpu
#   RUNNER_LABELS=self-hosted,linux,x64,docker,production
RUNNER_LABELS=self-hosted,linux,x64,docker

# Runner Group (optional)
# Organization runner group (requires admin:org scope)
# Default: default
RUNNER_GROUP=default

# =============================================================================
# GITHUB CONFIGURATION
# =============================================================================

# GitHub URL (optional)
# Default: https://github.com
# For GitHub Enterprise Server, change to your instance URL
GITHUB_URL=https://github.com

# =============================================================================
# RUNNER BEHAVIOR
# =============================================================================

# Ephemeral Mode (optional)
# If true, runner is automatically removed after completing one job
# Useful for security-sensitive environments or temporary runners
# Default: false
EPHEMERAL=false

# Replace Existing Runner (optional)
# If true, replaces existing runner with same name
# Default: true
RUNNER_REPLACE=true

# Disable Auto Update (optional)
# If true, prevents automatic runner updates
# Default: false
DISABLE_AUTO_UPDATE=false

# Work Directory (optional)
# Directory name for job workspaces (created inside container)
# Default: _work
RUNNER_WORK_DIRECTORY=_work

# =============================================================================
# DOCKER CONFIGURATION
# =============================================================================

# Host Directories for Volume Mounts
# These directories on the host will be mounted into the container

# Data Directory (optional)
# Persistent storage for runner configuration and state
# Default: ./data (relative to docker-compose.yml)
DATA_DIRECTORY=./data

# Work Directory Mount (optional)
# Host directory for job workspaces
# Default: ./work (relative to docker-compose.yml)
WORK_DIRECTORY=./work

# Scripts Directory (optional)
# Directory containing custom scripts (mounted read-only)
# Default: ./scripts (relative to docker-compose.yml)
SCRIPTS_DIRECTORY=./scripts

# =============================================================================
# RESOURCE LIMITS
# =============================================================================

# CPU Limits
# Maximum CPU cores the container can use
# Examples: 1.0, 2.5, 4.0
CPU_LIMIT=2.0

# CPU Reservations
# Guaranteed CPU cores for the container
CPU_RESERVATION=0.5

# Memory Limits
# Maximum memory the container can use
# Examples: 1G, 2G, 4G, 8G
MEMORY_LIMIT=4G

# Memory Reservations
# Guaranteed memory for the container
MEMORY_RESERVATION=1G

# =============================================================================
# MONITORING AND LOGGING
# =============================================================================

# Debug Mode (optional)
# Enable detailed logging and debug output
# Default: false
DEBUG=false

# Monitor Port (optional)
# Port for health monitoring endpoint (if monitoring profile is enabled)
# Default: 8080
MONITOR_PORT=8080

# =============================================================================
# MULTI-RUNNER SETUP EXAMPLES
# =============================================================================

# To run multiple runners on the same machine, use different project names:
#
# Terminal 1 (Primary runner):
#   docker-compose up -d
#
# Terminal 2 (Secondary runner with different name):
#   RUNNER_NAME=my-docker-runner-2 docker-compose --project-name runner2 up -d
#
# Terminal 3 (GPU runner with special labels):
#   RUNNER_NAME=gpu-runner RUNNER_LABELS=self-hosted,linux,x64,docker,gpu docker-compose --project-name gpu-runner up -d

# =============================================================================
# SECURITY CONSIDERATIONS
# =============================================================================

# Token Security:
#   - Use fine-grained personal access tokens when possible
#   - Regularly rotate your tokens
#   - Use organization runners with appropriate permissions
#   - Never commit .env files to version control

# Runner Security:
#   - Use ephemeral runners for sensitive workflows
#   - Regularly update runner images: docker-compose pull && docker-compose up -d
#   - Monitor runner logs: docker-compose logs -f
#   - Use resource limits to prevent resource exhaustion

# Network Security:
#   - Consider using private networks for organization runners
#   - Monitor network traffic if running in production environments
#   - Use firewall rules to restrict unnecessary access

# =============================================================================
# TROUBLESHOOTING
# =============================================================================

# Common Issues:

# 1. Runner registration fails:
#    - Verify GITHUB_TOKEN has correct permissions
#    - Check GITHUB_REPOSITORY format (owner/repo)
#    - Ensure token has access to the repository

# 2. Docker-in-Docker not working:
#    - Verify Docker socket is mounted: /var/run/docker.sock:/var/run/docker.sock
#    - Check Docker daemon is running on host
#    - Verify runner user has Docker group access

# 3. Resource issues:
#    - Increase CPU_LIMIT and MEMORY_LIMIT
#    - Check available host resources: docker stats
#    - Monitor disk space: docker system df

# 4. Networking issues:
#    - Test GitHub connectivity: curl -s https://api.github.com
#    - Check firewall settings
#    - Verify DNS resolution inside container

# Debugging Commands:
#   docker-compose logs github-runner          # View runner logs
#   docker-compose exec github-runner bash     # Shell into container
#   docker-compose exec github-runner ./health-check.sh verbose  # Detailed health check

# =============================================================================
# PRODUCTION DEPLOYMENT EXAMPLE
# =============================================================================

# For production deployment, consider these settings:
#
# RUNNER_LABELS=self-hosted,linux,x64,docker,production
# EPHEMERAL=true
# CPU_LIMIT=4.0
# MEMORY_LIMIT=8G
# DEBUG=false
# DISABLE_AUTO_UPDATE=false
#
# Resource monitoring:
#   docker stats --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"